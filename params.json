{"name":"bcferries","tagline":"BC Ferries Python Library","body":"# BC Ferries Python Library\r\n\r\nThis is the Python client library for interacting with information published on the [BC Ferries mobile site](http://mobile.bcferries.com/). It is essentially a wrapper around a BeautifulSoup-powered scraper. Better documentation and tests are still in the works; feel free to contribute! The source code for this library can be found at [yasyf/bcferries](https://github.com/yasyf/bcferries) on GitHub.\r\n\r\n## Installation\r\n\r\n`pip install bcferries`\r\n\r\n## Setup\r\n\r\nSome functions require interaction with a geocoding service; the Google Maps API is used for this. In order to prevent severe rate limiting, you'll want to acquire an API key. To let `bcferries` know about this key, set it as the `GOOGLE_MAPS_API_KEY` environment variable. Alternatively, you can pass it as an optional keyword argument to the constructor.\r\n\r\n```python\r\nfrom bcferries import BCFerries\r\n\r\nbc = BCFerries(google_maps_api_key='xxx-xxx-xxx')\r\n```\r\n\r\n## Usage\r\n\r\n```python\r\nbc = BCFerries()\r\n```\r\n\r\n### Terminals\r\n\r\n```python\r\nbc.nearest_terminal('Qualicum Beach')\r\n# BCFerriesTerminal(Nanaimo (Duke Pt))\r\n\r\nterminals = bc.terminals()\r\n# {u'Horseshoe Bay': BCFerriesTerminal(Horseshoe Bay), u'Tsawwassen': BCFerriesTerminal(Tsawwassen)}\r\nt = terminals['Tsawwassen']\r\n# BCFerriesTerminal(Tsawwassen)\r\nt.updated_at()\r\n# datetime.datetime(2014, 12, 29, 0, 4)\r\nt.next_crossing()\r\n# BCFerriesCrossing(Tsawwassen to Duke Point at 5:15am)\r\nt.location().address\r\n# u'Ferry Causeway, Delta, BC V4M, Canada'\r\n```\r\n\r\n### Routes\r\n\r\n```python\r\nroutes = t.routes()\r\n# {u'Tsawwassen to Duke Point': BCFerriesRoute(Tsawwassen to Duke Point)}\r\nr = routes['Tsawwassen to Duke Point']\r\n# BCFerriesRoute(Tsawwassen to Duke Point)\r\n\r\nr.from_, r.to\r\n# (BCFerriesTerminal(Tsawwassen), BCFerriesTerminal(Nanaimo (Duke Pt)))\r\nr.distance()\r\n# Distance(61.9591068557)\r\nr.car_waits\r\n# 0\r\n```\r\n\r\n### Crossings\r\n\r\n```python\r\ncrossing = r.crossings()['10:45pm']\r\n# BCFerriesCrossing(Tsawwassen to Duke Point at 5:45pm)\r\ncrossing.capacity\r\n# BCFerriesCapacity(18% Full)\r\n```\r\n\r\n### Schedules\r\n\r\n```python\r\nschedule = r.scheduled('12:45 PM')\r\n# BCFerriesScheduledCrossing(Queen of Alberni at 12:45 PM)\r\nschedule.status\r\n# u'On Time'\r\nschedule.sailing_time\r\n# datetime.timedelta(0, 7200)\r\nschedule.is_late()\r\n# False\r\nschedule.is_departed()\r\n# True\r\n```\r\n\r\n## Fuzzy Results\r\n\r\nAll returned dictionaries have fuzzy string matching on they keys.\r\n\r\n```python\r\nroutes['Tsawwassen to Duke Point'] == routes['Tsaw to DP']\r\n# True\r\n```\r\n\r\nThere is also fuzzy time matching on keys that represent a nearby time.\r\n\r\n```python\r\nr = routes['HBay to DBay']\r\nschedule = r.schedule()\r\nschedule['6:12 PM']\r\n# BCFerriesScheduledCrossing(Queen of Cowichan at 6:30 PM)\r\n```\r\n\r\n`datetime` objects can also be used as keys.\r\n\r\n```python\r\nfrom datetime import datetime\r\n\r\ndatetime.datetime.now()\r\n# datetime.datetime(2014, 12, 28, 10, 42, 35, 630996)\r\nschedule[datetime.datetime.now()]\r\n# BCFerriesScheduledCrossing(Coastal Renaissance at 10:40 AM)\r\n```\r\n\r\n## Caching\r\n\r\n`bcferries` caches the 16 most used API calls for up to five minutes by default. You can change this behavior as below. This must be done before creating a `BCFerries` object.\r\n\r\n```python\r\nimport bcferries\r\nimport datetime\r\n\r\nbcferries.set_cache_size(16)\r\nbcferries.set_cache_timeout(datetime.timedelta(minutes=5))\r\n```\r\n\r\nYou can also pass any function the `ignore_cache` keyword argument to bypass the cache, or call the `flush_cache` method on `BCFerries` to clear the entire cache.\r\n\r\n```python\r\nterminals = bc.terminals() # initial call takes multiple seconds\r\nterminals = bc.terminals() # repeated call returns almost instantly\r\nterminals = bc.terminals(ignore_cache=True) # takes multiple seconds to return\r\n\r\nbc.flush_cache() # wipes the cache\r\n```\r\n\r\n## Export\r\n\r\nYou can export any subset of information with a call to `to_dict` on any object. You can also use `to_fuzzy_dict` and `to_json` as needed. To export all available information, call any of these methods on a `BCFerries` instance, and be prepared to wait a while.\r\n\r\n```python\r\ncrossing.capacity\r\n# BCFerriesCapacity(18% Full)\r\ncrossing.capacity.to_dict()\r\n# {'passenger_filled': 32, 'mixed_filled': 4, 'name': '18% Full', 'filled': 18}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}